# ELBREAD: Elaboration process.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux4x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux2x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Elaboration time 0.0 [s].
asim -O5 +access +r cpu_testbench
# ELBREAD: Elaboration process.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux4x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux2x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Elaboration time 0.0 [s].
# VSIM: Stack memory: 32MB
# VSIM: Retval memory: 32MB
# 
# KERNEL: Main thread initiated.
# KERNEL: Kernel process initialization phase.
# ELAB2: Elaboration final pass...
# ELAB2: Create instances ...
# KERNEL: Time resolution set to 1ps.
# ELAB2: Create instances complete.
# SLP: Started
# SLP: Elaboration phase ...
# SLP: Warning: CPU.v (212): Length of connection (16) does not match the length of port "Immediate26" (26) on instance "/cpu_testbench/dut/uut".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "a" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "b" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "result" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Elaboration phase ... done : 0.0 [s]
# SLP: Generation phase ...
# SLP: Generation phase ... done : 0.2 [s]
# SLP: Finished : 0.3 [s]
# SLP: 0 primitives and 38 (100.00%) other processes in SLP
# SLP: 182 (98.38%) signals in SLP and 3 (1.62%) interface signals
# ELAB2: Elaboration final pass complete - time: 0.3 [s].
# KERNEL: SLP loading done - time: 0.0 [s].
# KERNEL: Warning: You are using the Active-HDL Student Edition. The performance of simulation is running at a reduced rate.
# KERNEL: Warning: Contact Aldec for available upgrade options - sales@aldec.com.
# KERNEL: SLP simulation initialization done - time: 0.0 [s].
# KERNEL: Kernel process initialization done.
# Allocation: Simulator allocated 4737 kB (elbread=427 elab2=4175 kernel=134 sdf=0)
# KERNEL: ASDB file was created in location C:\My_Designs\ArcProject2 - Copy\Project2\src\wave.asdb
#  11:18 PM, Monday, January 29, 2024
#  Simulation has been initialized
run 100 ns
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzzxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000000100, pc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000000, pc_next_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000000, ext_reg_out=0000000000000000xxxxxxxxxxxxxxxx, pc_BTA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000000, imm_16=xxxxxxxxxxxxxxxx, pc_J_in=000000zzzzzzzzzzxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000000, inst_mem_out=00001100000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100000000000000000000000000, op_code=xxxxxx, inst_rs1=xxxx, inst_rs2=xxxx, inst_rd=xxxx, imm_16=xxxxxxxxxxxxxxxx, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=xx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = xxxxxxxxxxxxxxxx, EX_OP=0, ext_reg_in=0000000000000000xxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 0000000000000000xxxxxxxxxxxxxxxx, ext_reg_out=0000000000000000xxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=xxxx,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= xxxx, mux_src_rf_out=xxxx, inst_rd=xxxx,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 0000000000000000xxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000000100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 00, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000011, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0000, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0000,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0000,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: stopped at time: 100 ns
restart
# ELBREAD: Elaboration process.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux4x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux2x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Elaboration time 0.0 [s].
# 
# KERNEL: Main thread initiated.
# KERNEL: Kernel process initialization phase.
# ELAB2: Elaboration final pass...
# ELAB2: Create instances ...
# KERNEL: Time resolution set to 1ps.
# ELAB2: Create instances complete.
# SLP: Started
# SLP: Finished. Using existing simulator library
# SLP: 0 primitives and 38 (100.00%) other processes in SLP
# SLP: 182 (98.38%) signals in SLP and 3 (1.62%) interface signals
# ELAB2: Elaboration final pass complete - time: 0.0 [s].
# KERNEL: SLP loading done - time: 0.0 [s].
# KERNEL: Warning: You are using the Active-HDL Student Edition. The performance of simulation is running at a reduced rate.
# KERNEL: Warning: Contact Aldec for available upgrade options - sales@aldec.com.
# KERNEL: SLP simulation initialization done - time: 0.0 [s].
# KERNEL: Kernel process initialization done.
# Allocation: Simulator allocated 4737 kB (elbread=427 elab2=4175 kernel=134 sdf=0)
# KERNEL: ASDB file was created in location C:\My_Designs\ArcProject2 - Copy\Project2\src\wave.asdb
#  11:19 PM, Monday, January 29, 2024
#  Simulation has been initialized
endsim
# VSIM: Simulation has finished.
alog -O2 -sve -msg 5 -sv2k12 -work Project2 $dsn/src/Mux2x1.v $dsn/src/Mux2x1_testbench.v $dsn/src/Mux4x1.v $dsn/src/Mux4x1_testbench.v $dsn/src/ALU.v $dsn/src/ALU_testbench.v $dsn/src/RegFile.v $dsn/src/ControlUnit.v $dsn/src/RegFile_testbench.v $dsn/src/ControlUnit_testbench.v $dsn/src/InstructionMemory.v $dsn/src/InstructionMemory_testbench.v $dsn/src/DataMemory.v $dsn/src/PC.v $dsn/src/PC_testbench.v $dsn/src/CPU.v $dsn/src/Extender.v $dsn/src/IR.v $dsn/src/IR_testbench.v $dsn/src/Adder.v $dsn/src/Adder_testbench.v $dsn/src/Extender_testbench.v $dsn/src/DFlipFlop.v $dsn/src/DFlipFlop_testbench.v $dsn/src/DataMemory_testbench.v $dsn/src/CPU_testbench.v $dsn/src/concatenation.v $dsn/src/concatenation_testbench.v
# Pass 1. Scanning modules hierarchy.
# Info: VCP2113 Module \$root found in current working library.
# Pass 2. Processing instantiations.
# Pass 3. Processing behavioral statements.
# Running Optimizer.
# ELB/DAG code generating.
# Info: VCP2113 Module \$root found in current working library.
# Unit top modules: mux2x1_testbench mux4x1_testbench ALU_testbench RegFile_testbench ControlUnit_testbench InstructionMemory_testbench PC_testbench IR_testbench adder_32bit_tb sign_extender_testbench dFlipFlop_testbench data_memory_with_stack_tb cpu_testbench concatenation_testbench.
# $root top modules: mux2x1_testbench mux4x1_testbench ALU_testbench RegFile_tb RegFile_testbench rf_tb ControlUnit_testbench DataMemory PC_testbench InstructionMemory_textbench InstructionMemory_testbench sign_extender_tb IR_testbench adder_32bit_tb sign_extender_testbench dFlipFlop_testbench data_memory_with_stack_testbench cpu_testbench concatenation_testbench data_memory_with_stack_tb.
# Compile success 0 Errors 0 Warnings  Analysis time: 0[s].
# Warning: ALOG: The source is compiled without the -dbg switch. Line breakpoints and assertion debug will not be available.
# done
asim -O5 +access +r cpu_testbench
# ELBREAD: Elaboration process.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux4x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Warning: ELBREAD_0049 Module 'mux2x1' does not have a `timescale directive, but previous modules do.
# ELBREAD: Elaboration time 0.0 [s].
# VSIM: Stack memory: 32MB
# VSIM: Retval memory: 32MB
# 
# KERNEL: Main thread initiated.
# KERNEL: Kernel process initialization phase.
# ELAB2: Elaboration final pass...
# ELAB2: Create instances ...
# KERNEL: Time resolution set to 1ps.
# ELAB2: Create instances complete.
# SLP: Started
# SLP: Elaboration phase ...
# SLP: Warning: CPU.v (212): Length of connection (16) does not match the length of port "Immediate26" (26) on instance "/cpu_testbench/dut/uut".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "a" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "b" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Warning: CPU.v (243): Length of connection (4) does not match the length of port "result" (32) on instance "/cpu_testbench/dut/Mux_RF".
# SLP: Elaboration phase ... done : 0.0 [s]
# SLP: Generation phase ...
# SLP: Generation phase ... done : 0.2 [s]
# SLP: Finished : 0.3 [s]
# SLP: 0 primitives and 38 (100.00%) other processes in SLP
# SLP: 182 (98.38%) signals in SLP and 3 (1.62%) interface signals
# ELAB2: Elaboration final pass complete - time: 0.3 [s].
# KERNEL: SLP loading done - time: 0.0 [s].
# KERNEL: Warning: You are using the Active-HDL Student Edition. The performance of simulation is running at a reduced rate.
# KERNEL: Warning: Contact Aldec for available upgrade options - sales@aldec.com.
# KERNEL: SLP simulation initialization done - time: 0.0 [s].
# KERNEL: Kernel process initialization done.
# Allocation: Simulator allocated 4737 kB (elbread=427 elab2=4175 kernel=134 sdf=0)
# KERNEL: ASDB file was created in location C:\My_Designs\ArcProject2 - Copy\Project2\src\wave.asdb
#  11:19 PM, Monday, January 29, 2024
#  Simulation has been initialized
run 100000 ns
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzzxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000000100, pc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000000, pc_next_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000000, ext_reg_out=0000000000000000xxxxxxxxxxxxxxxx, pc_BTA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000000, imm_16=xxxxxxxxxxxxxxxx, pc_J_in=000000zzzzzzzzzzxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000000, inst_mem_out=00001100000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100000000000000000000000000, op_code=xxxxxx, inst_rs1=xxxx, inst_rs2=xxxx, inst_rd=xxxx, imm_16=xxxxxxxxxxxxxxxx, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=xx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = xxxxxxxxxxxxxxxx, EX_OP=0, ext_reg_in=0000000000000000xxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 0000000000000000xxxxxxxxxxxxxxxx, ext_reg_out=0000000000000000xxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=xxxx,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= xxxx, mux_src_rf_out=xxxx, inst_rd=xxxx,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 0000000000000000xxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000000100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 00, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000011, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0000, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0000,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0000,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000001000, pc_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000000100, pc_next_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000000100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000000100, inst_mem_out=00010100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100010000000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000001100, pc_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001000, pc_next_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001000, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001000, inst_mem_out=00010100100000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00010100100000000000000000010000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=1, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000001100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000100, pc_BTA_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000100, pc_J_in=000000zzzzzzzzzz0000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000101, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0010, imm_16=0000000000000100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000100, EX_OP=1, ext_reg_in=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000100, ext_reg_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0010,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=xxxx, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000100, mux_src_ALU_out=00000000000000000000000000000100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000100 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000010000, pc_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000001100, pc_next_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000001100, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000001100, inst_mem_out=00001100110011000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001100110011000000000000000000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000010100, pc_out=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010000, pc_next_in=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010000, ext_reg_out=00000000000000000000000000000000, pc_BTA_in=00000000000000000000000000010000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010000, imm_16=0000000000000000, pc_J_in=000000zzzzzzzzzz0000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010000, inst_mem_out=00101000010000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00101000010000000000000000110000, op_code=000011, inst_rs1=0011, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000000000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000000000, EX_OP=0, ext_reg_in=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000000000, ext_reg_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0011, mux_src_rf_out=xxxx, inst_rd=0011,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000000000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000010100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 00, ALU_res_in=00000000000000000000000000000000 ,ALU_flags_in[0]= x, ALU_flags_in[1]=1 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000000000 ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= x01x, ALU_flags_out=x01x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000000000, ALU_res_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001010, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 1, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 1, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000011000, pc_out=00000000000000000000000000010100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000010100, pc_next_in=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000010100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000010100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000010100, inst_mem_out=00111100010000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00111100010000000000000000000000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000011100, pc_out=00000000000000000000000000011000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011000, pc_next_in=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011000, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011000, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011000, inst_mem_out=00101100110010000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00101100110010000000000000100000, op_code=001111, inst_rs1=0000, inst_rs2=xxxx, inst_rd=0001, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0001,mux_src_rf_out=0001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0001, inst_rd=0001,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000011100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=001011, inst_rs1=0010, inst_rs2=xxxx, inst_rd=0011, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=xxxx, inst_rd=0011,mux_src_rf_out=0011
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0010, mux_src_rf_out=0011, inst_rd=0011,BusA_in=00000000000000000000000000000000 BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 100, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 1, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000100000, pc_out=00000000000000000000000000011100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000011100, pc_next_in=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000011100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000011100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000011100, inst_mem_out=00001000010001001000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00001000010001001000000000000000, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000100100, pc_out=00000000000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100000, pc_next_in=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100000, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100000, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100000, inst_mem_out=01000000011111111111111001111111
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=01000000011111111111111001111111, op_code=000010, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000100100, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=010000, inst_rs1=0001, inst_rs2=0010, inst_rd=0001, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=0, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 0, inst_rs2=0010, inst_rd=0001,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0001,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=1,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=1 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= 00000000000000000000000000000000, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000000000 ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 010, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 011, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000101000, pc_out=00000000000000000000000000100100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000100100, pc_next_in=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000100100, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000100100, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000100100, inst_mem_out=00100100100001000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00100100100001000000000000110000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 000, pc_in=00000000000000000000000000101100, pc_out=00000000000000000000000000101000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000101000, pc_next_in=00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000101000, ext_reg_out=00000000000000000000000000001100, pc_BTA_in=00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000101000, imm_16=0000000000001100, pc_J_in=000000zzzzzzzzzz0000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000101000, inst_mem_out=00011101000000000000000000100000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00011101000000000000000000100000, op_code=001001, inst_rs1=0001, inst_rs2=0010, inst_rd=0010, imm_16=0000000000001100, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001100, EX_OP=0, ext_reg_in=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001100, ext_reg_out=00000000000000000000000000001100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0010,mux_src_rf_out=0010
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0001, mux_src_rf_out=0010, inst_rd=0010,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001100, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000101100, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALUop= 10, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 0, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: State = 000 , next_state = 001
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000110000, pc_out=00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000101100, pc_next_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000101100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000101100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000101100, inst_mem_out=00110000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00110000000000000000000000101100, op_code=000111, inst_rs1=0000, inst_rs2=0010, inst_rd=0100, imm_16=0000000000001000, J_offset=xxxxxxxxxxxxxxxxxxxxxxxxxx, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=1, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0100,mux_src_rf_out=0100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0100, inst_rd=0100,BusA_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusA_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,pc_next_in= 00000000000000000000000000110000, mux_DataInputSrc_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, mux_src_ALU_out=00000000000000000000000000001000 ,ALUop= 01, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,ALU_flags_in[0]= x, ALU_flags_in[1]=x ,ALU_flags_in[2]= x, ALU_flags_in[3]=x
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ,mux_DataInputSrc_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= xxxx, ALU_flags_out=xxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, ALU_res_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for PC+1: pc_next_out = 00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Jump Target Address: pc_J_out = 000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Branch Target Address: pc_BTA_out = 00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D Flip Flop for Stack: pc_stack_out = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: Mux of PC: PCsrc = 00, pc_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: PC module: state = 001, pc_in=00000000000000000000000000110000, pc_out=00000000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find PC+1: pc_out = 00000000000000000000000000101100, pc_next_in=00000000000000000000000000110000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find BTA: pc_out = 00000000000000000000000000101100, ext_reg_out=00000000000000000000000000001000, pc_BTA_in=00000000000000000000000000110100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: To find JTA: pc_out = 00000000000000000000000000101100, imm_16=0000000000001000, pc_J_in=000000zzzzzzzzzz0000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: pc_out = 00000000000000000000000000101100, inst_mem_out=00110000000000000000000000101100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_mem_out=00110000000000000000000000101100, op_code=001100, inst_rs1=0000, inst_rs2=0010, inst_rd=0100, imm_16=0000000000001000, J_offset=00000000000000000000101100, mode=00
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: imm_16 = 0000000000001000, EX_OP=1, ext_reg_in=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ext_reg_in= 00000000000000000000000000001000, ext_reg_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: RS2src= 1, inst_rs2=0010, inst_rd=0100,mux_src_rf_out=0100
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: inst_rs1= 0000, mux_src_rf_out=0100, inst_rd=0100,BusA_in=00000000000000000000000000000000 BusB_in= 00000000000000000000000000000000, BusW=00000000000000000000000000001000, BusW1=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,RegRw=0,Rs1Rw=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_in= 00000000000000000000000000000000, BusA_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusB_in= 00000000000000000000000000000000, BusB_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: WBdata= 0, ALU_res_out=00000000000000000000000000001000 ,D_mem_reg_out= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, BusW=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALUSrc= 1, BusB_out=00000000000000000000000000000000 ,ext_reg_out= 00000000000000000000000000001000, mux_src_ALU_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: DataInputSrc= 0, BusB_out=00000000000000000000000000000000 ,pc_next_in= 00000000000000000000000000110000, mux_DataInputSrc_out=00000000000000000000000000000000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: BusA_out= 00000000000000000000000000000000, mux_src_ALU_out=00000000000000000000000000001000 ,ALUop= 01, ALU_res_in=00000000000000000000000000001000 ,ALU_flags_in[0]= 0, ALU_flags_in[1]=0 ,ALU_flags_in[2]= 0, ALU_flags_in[3]=0
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: MemW= 0, MemR=0 ,DataMemEn= 1, ALU_res_in=00000000000000000000000000001000 ,mux_DataInputSrc_out= 00000000000000000000000000000000, D_mem_reg_in=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_flags_in= 0000, ALU_flags_out=0000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: ALU_res_in= 00000000000000000000000000001000, ALU_res_out=00000000000000000000000000001000
# KERNEL: ----------------------------------------------------------------------------------------------------------
# KERNEL: D_mem_reg_in= xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, D_mem_reg_out=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
# KERNEL: Test Case 1 Results:
# KERNEL: Current State: 001
# KERNEL: Next State: 000
# KERNEL: op_code: 001100
# KERNEL: inst_rs1: 0000
# KERNEL: inst_rs2: 0010
# KERNEL: inst_rd: 0100
# RUNTIME: Info: RUNTIME_0070 CPU_testbench.v (34): $stop called.
# KERNEL: Time: 450 ns,  Iteration: 0,  Instance: /cpu_testbench,  Process: @INITIAL#19_1@.
# KERNEL: Stopped at time 450 ns + 0.
endsim
# VSIM: Simulation has finished.
